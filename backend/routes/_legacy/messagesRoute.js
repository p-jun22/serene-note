// backend/routes/messagesRoute.js
const { Router } = require('express');
const { getFirestore, FieldValue } = require('firebase-admin/firestore');
const { authMiddleware } = require('../middlewares/authMiddleware'); // ‚úÖ Í≤ΩÎ°ú ÏàòÏ†ï
const gptService = require('../services/gptService');               // ‚úÖ services/Î°ú Í≤ΩÎ°ú ÌÜµÏùº
const axios = require('axios');

const HF_SERVER_URL = process.env.HF_SERVER_URL || 'http://localhost:8000'; // huggingface_server.py Ìè¨Ìä∏

const router = Router();
router.use(authMiddleware);

// Ïú†Ìã∏
const ymd = (d) => {
  const dt = d instanceof Date ? d : new Date(d);
  return dt.toISOString().slice(0, 10);
};

// Ïù¥Î™®ÏßÄ Îß§Ìïë (ÌîÑÎ°†Ìä∏ÏôÄ ÎèôÏùº Í∏∞Ï§Ä)
const EMOJI_MAP = {
  'ÌñâÎ≥µ':'üòä','Í∏∞ÏÅ®':'üòä','Ï¶êÍ±∞ÏõÄ':'üòä','ÎßåÏ°±':'üôÇ',
  'ÏÇ¨Îûë':'ü•∞','ÏÑ§Î†ò':'ü§©','Í∏∞ÎåÄ':'ü§©',
  'ÌèâÏò®':'üòå','ÏïàÏ†ï':'üòå','Ï§ëÎ¶Ω':'üòê',
  'Î∂àÏïà':'üòü','Í±±Ï†ï':'üòü','Ï¥àÏ°∞':'üòü','ÎëêÎ†§ÏõÄ':'üò®','Í≥µÌè¨':'üò®',
  'Ïä¨Ìîî':'üò¢','Ïö∞Ïö∏':'üòû','ÏÉÅÏã§':'üò¢',
  'Î∂ÑÎÖ∏':'üò†','ÏßúÏ¶ù':'üò†','Ìôî':'üò†',
  'ÏàòÏπòÏã¨':'üò≥','Î∂ÄÎÅÑÎü¨ÏõÄ':'üò≥',
  'ÌîºÍ≥§':'ü•±','ÏßÄÏπ®':'ü•±'
};
const pickEmoji = (labels = []) => {
  for (const raw of labels) {
    const k = String(raw || '').trim();
    if (EMOJI_MAP[k]) return EMOJI_MAP[k];
  }
  return 'üòê';
};

// HF + GPT ÌòºÌï© Î∂ÑÏÑù
async function mixAnalyze({ uid, text }) {
  // 1) HuggingFace ÏÑúÎ≤Ñ Ìò∏Ï∂ú (Ïã§Ìå®Ìï¥ÎèÑ Î¨¥ÏãúÌïòÍ≥† ÏßÑÌñâ)
  let hf = {};
  try {
    const r = await axios.post(`${HF_SERVER_URL}/analyze`, { text }, { timeout: 20000 });
    hf = r.data || {};
  } catch {}

  // 2) GPT ÏÑúÎπÑÏä§ Ìò∏Ï∂ú (Í∏∞Ï°¥ gptService Ìï®ÏàòÎì§ Ï§ë Í∞ÄÏö©Ìïú Í≤É ÏÇ¨Ïö©)
  let gpt = {};
  try {
    if (typeof gptService.analyzeText === 'function') {
      gpt = await gptService.analyzeText({ uid, text });
    } else if (typeof gptService.runCBTAnalysis === 'function') {
      gpt = await gptService.runCBTAnalysis(text, { uid });
    } else if (typeof gptService.askGpt === 'function') {
      gpt = await gptService.askGpt({ uid, text });
    } else if (typeof gptService.handle === 'function') {
      gpt = await gptService.handle({ uid, text });
    }
  } catch {}

  // 3) Îã®Ïàú Í∞ÄÏ§ë ÌèâÍ∑†
  const wHF  = Number(process.env.MIX_W_HF  || 0.5);
  const wGPT = Number(process.env.MIX_W_GPT || 0.5);
  const norm = (v) => (v == null ? null : Math.max(0, Math.min(1, Number(v))));
  const schemaScore      = (norm(hf?.schemaScore)      ?? 0) * wHF  + (norm(gpt?.schemaScore)      ?? 0) * wGPT;
  const consistencyScore = (norm(hf?.consistencyScore) ?? 0) * wHF  + (norm(gpt?.consistencyScore) ?? 0) * wGPT;
  const totalScore       = (norm(hf?.totalScore)       ?? 0) * wHF  + (norm(gpt?.totalScore)       ?? 0) * wGPT;

  // ÎùºÎ≤® Ìï©ÏπòÍ∏∞
  const toArr = (v) => Array.isArray(v) ? v : (v ? [v] : []);
  const uniq = (arr) => [...new Set(arr.filter(Boolean).map(String))];
  const emotions    = uniq([...(toArr(hf?.emotions)), ...(toArr(gpt?.Í∞êÏ†ï || gpt?.emotions))]);
  const distortions = uniq([...(toArr(hf?.distortions)), ...(toArr(gpt?.Ïù∏ÏßÄÏôúÍ≥° || gpt?.cognitiveDistortions))]);
  const coreBelief  = (gpt?.ÌïµÏã¨ÎØøÏùå || gpt?.coreBelief || hf?.coreBelief || '') + '';
  const socraticQuestion = (gpt?.Ï∂îÏ≤úÏßàÎ¨∏ || gpt?.socraticQuestion || hf?.socraticQuestion || '') + '';

  return {
    emotions,
    distortions,
    coreBelief,
    socraticQuestion,
    schemaScore,
    consistencyScore,
    totalScore,
  };
}

/**
 * POST /api/messages/send
 * Ìò∏Ìôò ÏûÖÎ†• 2Í∞ÄÏßÄ Î™®Îëê ÌóàÏö©:
 *  A) { sessionId, conversationId?, text }
 *  B) { sessionId, conversationId?, message: { text, analysisSnapshot_v1? } }
 */
router.post('/send', async (req, res, next) => {
  try {
    const uid = req.user.uid;
    const sessionId = req.body?.sessionId;
    const conversationId = req.body?.conversationId || null;

    // Î≥∏Î¨∏ ÌÜµÌï©: text Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ message.text
    const text = typeof req.body?.text === 'string'
      ? req.body.text
      : (req.body?.message && typeof req.body.message.text === 'string'
          ? req.body.message.text
          : '');

    if (!text) {
      return res.status(400).json({ error: 'text is required (or message.text)' });
    }

    const dateKey = ymd(sessionId || new Date());
    const db = getFirestore();

    // 1) ÎåÄÌôî Î¨∏ÏÑú Ï§ÄÎπÑ(ÌîÑÎ°†Ìä∏Í∞Ä ÎØ∏Î¶¨ ÏÉùÏÑ±ÌñàÏñ¥ÎèÑ merge)
    let convId = conversationId;
    if (!convId) {
      const docRef = await db.collection('conversations').add({
        uid, ownerEmail: req.user.email || null, dateKey,
        title: `${dateKey} ÎåÄÌôî`,
        createdAt: FieldValue.serverTimestamp(),
        updatedAt: FieldValue.serverTimestamp(),
      });
      convId = docRef.id;
    } else {
      await db.doc(`conversations/${convId}`).set({
        uid, ownerEmail: req.user.email || null, dateKey,
        updatedAt: FieldValue.serverTimestamp(),
      }, { merge: true });
    }

    // 2) ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï†ÄÏû• (Î£®Ìä∏/ÏÑ∏ÏÖò Ìä∏Î¶¨ ÎèôÏãú Ï†ÄÏû•)
    const userMsgDoc = {
      role: 'user',
      text,
      createdAt: FieldValue.serverTimestamp(),
      // Í≥ºÍ±∞ ÌòïÏãù Ìò∏Ìôò: ÌÅ¥ÎùºÍ∞Ä Î≥¥ÎÇ∏ analysisSnapshot_v1Í∞Ä ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú Î≥¥Ï°¥
      analysisSnapshot_v1: req.body?.message?.analysisSnapshot_v1 || null
    };
    await db.collection(`conversations/${convId}/messages`).add(userMsgDoc);
    await db.collection(`users/${uid}/sessions/${dateKey}/conversations/${convId}/messages`).add(userMsgDoc);

    // 3) ÌòºÌï©Î∂ÑÏÑù
    const mixed = await mixAnalyze({ uid, text });

    // 4) Î¥á Î©îÏãúÏßÄ ÏÉùÏÑ±/Ï†ÄÏû•
    const botText = `
[${dateKey}]
Í∞êÏ†ï: ${mixed.emotions.join(', ')}
Ïù∏ÏßÄ ÏôúÍ≥°: ${mixed.distortions.join(', ')}
ÌïµÏã¨ ÎØøÏùå: ${mixed.coreBelief || '-'}
Ï∂îÏ≤ú ÏßàÎ¨∏: ${mixed.socraticQuestion || '-'}
(GPT Ïã†Î¢∞ÎèÑ ÏßÄÌëú)
- Ïä§ÌÇ§Îßà ÏùºÏπòÎèÑ: ${mixed.schemaScore?.toFixed?.(2) ?? '-'}
- ÏùºÍ¥ÄÏÑ± Ï†êÏàò: ${mixed.consistencyScore?.toFixed?.(2) ?? '-'}
- ÌÜµÌï© Ïã†Î¢∞ÎèÑ: ${mixed.totalScore?.toFixed?.(2) ?? '-'}
`.trim();

    const botMsgDoc = {
      role: 'assistant',
      text: botText,
      createdAt: FieldValue.serverTimestamp(),
      analysisSnapshot_v1: {
        emotions: mixed.emotions,
        distortions: mixed.distortions,
        coreBeliefs: mixed.coreBelief ? [mixed.coreBelief] : [],
        recommendedQuestions: mixed.socraticQuestion ? [mixed.socraticQuestion] : [],
        confidences: {
          schemaScore: mixed.schemaScore ?? null,
          consistencyScore: mixed.consistencyScore ?? null,
          totalScore: mixed.totalScore ?? null,
        }
      }
    };

    await db.collection(`conversations/${convId}/messages`).add(botMsgDoc);
    await db.collection(`users/${uid}/sessions/${dateKey}/conversations/${convId}/messages`).add(botMsgDoc);

    // 5) Ï∫òÎ¶∞Îçî ÏßëÍ≥Ñ/ÎåÄÌëú Ïù¥Î™®ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
    const moodEmoji = pickEmoji(mixed.emotions);
    const calRef = db.doc(`users/${uid}/calendar/${dateKey}`);
    await db.runTransaction(async (tx) => {
      const snap = await tx.get(calRef);
      const prev = snap.exists ? snap.data() : {};
      const nextCount = (typeof prev.count === 'number' ? prev.count : 0) + 1;
      tx.set(calRef, {
        count: nextCount,
        topEmoji: moodEmoji,
        updatedAt: FieldValue.serverTimestamp(),
      }, { merge: true });
    });

    // 6) ÎåÄÌôî Î©îÌÉÄ ÏóÖÎç∞Ïù¥Ìä∏
    await db.doc(`conversations/${convId}`).set({
      updatedAt: FieldValue.serverTimestamp(),
      lastBotAt: FieldValue.serverTimestamp(),
      moodEmoji,
      moodLabels: mixed.emotions,
    }, { merge: true });

    return res.json({
      conversationId: convId,
      user: { text },
      bot: { text: botText },
      moodEmoji,
      moodLabels: mixed.emotions,
      calendar: { topEmoji: moodEmoji },
    });
  } catch (e) {
    next(e);
  }
});

module.exports = router;
